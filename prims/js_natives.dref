
(* the JS parser treats the tokens {undefined,NaN,Infinity} as variables *)
val __undefined :: {(= v undefined)}
val __NaN :: Num
val __Infinity :: Num

(* disallowing new Object(...), new Array(...), new Function(...) *)
val __Object :: Top
val __Array :: Top
val __Function :: Top

(* these are internal to desugaring *)
val ____ObjPro :: Ref(lObjPro)
val ____ArrPro :: Ref(lArrPro)
val ____FunPro :: Ref(lFunPro)

val __hasOwnProperty :: {(and
  (v :: (this:Ref, kk:Str) / (this: dd:Dict > this.pro)
     -> {Bool|(iff (= v true) (has dd {kk}))} / same)
  (v :: [A] (this:Ref, kk:Str) / (this: Arr(A) > this.pro)
     -> {Bool|(iff (= v true) (= kk "length"))} / same)
  (v :: [A] (this:Ref, i:Int) / (this: aa:Arr(A) > this.pro)
     -> {Bool|(implies (and (packed aa) (>= i 0))
                       (iff (= v true) (< i (len aa))))} / same)
)}

(* the Object.prototype dictionary *)
val theObjPro :: { Dict | (and (dom v {"hasOwnProperty"})
  (= (sel v "hasOwnProperty") __hasOwnProperty)
)}

(* the Array.prototype dictionary *)
val theArrPro :: { Dict | (and (dom v {"push","pop"})
  ((sel v "push") ::
        [A] (this:Ref, xx:A) / (this: aa:Arr(A) > this.pro)
     -> {Int|(implies (packed aa) (= v (+ 1 (len aa))))}
      / (this: {(and (v::Arr(A)) 
                (implies (packed aa)
                         (and (packed v)
                              (= (len v) (+ 1 (len aa)))
                              (= (sel aa (len aa)) xx))))} > this.pro))
  ((sel v "pop") ::
        [A] (this:Ref) / (this: aa:Arr(A) > this.pro)
     -> {(ite (packed aa)
              (and (v::A) (= v (sel aa (- (len aa) 1))))
              (or (v::A) (= v undefined)))}
      / (this: {(and (v::Arr(A))
                (implies (packed aa)
                         (and (packed v)
                              (= (len v) (- (len aa) 1))
                              (> (len aa) 0))))} > this.pro))
)}



(* Array.isArray *)
val __isArray ::
  {(and (v :: [A] (this:Top, xx:Ref?) / (xx: Arr(A) > xx.pro)
           -> {(= v true)} / same)
        (v :: (this:Top, xx:Ref?) / (xx: Dict > xx.pro)
           -> {(= v false)} / same)
        
        (* PV: adding this so that I don't have to thaw before using 
         * isArray on strong locations. (Thawing will fail for 
         * values that are not references to weak locations) *) 
        (*(v :: (this:Top, xx:Top) -> Bool)*)
        (*(v :: (this:Top, xx:Ref?) -> Bool)*)
        (*(v :: (this:Top, xx:Ref) / (l: Arr(Top) > xx.pro)*)
        (*   -> {(ite (xx :: Ref(l)) (= v true) (Bool v))} / same)*)
        (*(v :: (this:Top, xx:Ref) -> {(Bool v)})*)
        
        (v :: (this:Top, {(or (= (tag v) "number") (= (tag v) "boolean")
                              (= (tag v) "string") (= (tag v) "undefined")
                              (= v null))})
           -> {(= v false)}))}

(* the Function.prototype dictionary *)
val theFunPro :: Empty

heap (
  lObjPro : theObjPro > lROOT
, lArrPro : theArrPro > lObjPro
, lFunPro : theFunPro > lObjPro
)

val end_of_js_natives :: Top
