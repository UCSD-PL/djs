
(***** Wrappers for Base Types ************************************************)

val getPropStr ::
     (xx:Str, kk:{Str|(= v {"length","charAt","toLowerCase"})})
  -> {(ite (= kk "length") (and (Int v) (>= v 0))
      (ite (= kk "charAt") (v :: (this:Str, Int) -> Str)
      (ite (= kk "toLowerCase") (v :: (this:Str) -> Str) TRU)))}

val getPropNum ::
     (xx:Num, kk:{Str|(= v {"toString"})})
  -> {(ite (= kk "toString") (v :: (this:Num) -> Str)
      TRU)}

(* developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/ *)


(***** Objects / Arrays *******************************************************)

(**    [[ x.f    ]] = getProp ([[x]],  "f" )                                 **)
(**    [[ x["f"] ]] = getProp ([[x]],  "f" )                                 **)
(**    [[ x[i]   ]] = getIdx  ([[x]],   i  )    where i is an int literal    **)
(**    [[ x[k]   ]] = getElem ([[x]], [[k]])    where k is anything else     **)

val getPropObj ::
     (xx:Ref?, kk:Str) / (xx: dd:Dict > xx.pro)
  -> {(and (not (= xx null))
      (ite (objhas dd kk cur xx.pro)
           (= v (objsel dd kk cur xx.pro))
           (= v undefined)))} / same

val getPropArr :: [A]
     (xx:Ref?, kk:Str) / (xx: aa:Arr(A) > xx.pro)
  -> {(and (not (= xx null))
      (ite (= kk "length")
           (and (Int v) (>= v 0) (>= (len aa) 0)
                (implies (packed aa) (= v (len aa))))
           (ite (heaphas cur xx.pro kk)
                (= v (heapsel cur xx.pro kk))
                (= v undefined))))} / same

val getIdx :: [A]
     (xx:Ref?, ii:Int) / (xx: aa:Arr(A) > xx.pro)
  -> {?(A)|(and (not (= xx null))
           (ite (packed aa)
                (ite (and (>= ii 0) (< ii (len aa)))
                     (and (v::A) (= v (sel aa ii)))
                     (= v undefined))
                (or (v::A) (= v undefined))))} / same

val getProp :: {(and (type getPropObj) (type getPropArr)
                     (type getPropStr) (type getPropNum))}

val getElem :: {(and (type getPropObj) (type getPropArr) (type getIdx))}

(**    [[ x.f  = y ]] = setProp ([[x]],  "f" , [[y]])                        **)
(**    [[ x[i] = y ]] = setIdx  ([[x]],   i  , [[y]])                        **)
(**    [[ x[k] = y ]] = setElem ([[x]], [[k]], [[y]])                        **)

val setPropObj ::
     (xx:Ref?, yy:Str, zz:Top) / (xx: dd:Dict > xx.pro)
  -> {(and (not (= xx null)) (= v zz))}
   / (xx: {(= v (upd dd yy zz))} > xx.pro)

val setPropArr :: [A]
     (xx:Ref?, kk:{(= v "length")}, nn:Int) / (xx: aa:Arr(A) > xx.pro)
  -> {(and (not (= xx null)) (= v nn))}
   / (xx: {Arr(A)|(implies (and (packed aa) (>= nn 0) (<= nn (len aa)))
                           (and (packed v) (= (len v) nn)))} > xx.pro)

val setIdx :: [A]
     (xx:Ref?, ii:Int, yy:A) / (xx: aa:Arr(A) > xx.pro)
  -> {(and (not (= xx null)) (= v yy))}
   / (xx: {Arr(A)|(and 
             (= (sel aa ii) yy)
             (implies (and (packed aa) (>= ii 0) (< ii (len aa)))
                      (and (packed v) (= (len v) (len aa))))
             (implies (and (packed aa) (= ii (len aa)))
                      (and (packed v) (= (len v) (+ 1 (len aa))))))} > xx.pro)

val setProp :: {(and (type setPropObj) (type setPropArr))}

val setElem :: {(and (type setPropObj) (type setPropArr) (type setIdx))}

(**    [[  i  in x ]] = hasIdx  ([[x]],   i  )                                 **)
(**    [[ "f" in x ]] = hasProp ([[x]],  "f" )                                 **)
(**    [[  k  in x ]] = hasElem ([[x]], [[k]])                                 **)

val hasPropObj ::
     (xx:Ref?, kk:Str) / (xx: dd:Dict > xx.pro)
  -> {Bool|(and (not (= xx null))
           (iff (= v true) (objhas dd kk cur xx.pro)))} / same

val hasPropArr :: [A]
     (xx:Ref?, kk:Str) / (xx: Arr(A) > xx.pro)
  -> {Bool|(and (not (= xx null))
           (iff (= v true) (or (= kk "length") (heaphas cur xx.pro kk))))} / same

val hasIdx :: [A]
     (xx:Ref?, ii:Int) / (xx: aa:Arr(A) > xx.pro)
  -> {Bool|(and (not (= xx null))
           (implies (and (packed aa) (>= ii 0))
                    (iff (= v true) (< ii (len aa)))))} / same

val hasProp :: {(and (type hasPropObj) (type hasPropArr))}

val hasElem :: {(and (type hasPropObj) (type hasPropArr) (type hasIdx))}

(**    [[ delete x.f  ]] = delPropObj ([[x]],  "f" )                         **)
(**    [[ delete x[i] ]] = delIdx     ([[x]],   i  )                         **)
(**    [[ delete x[k] ]] = delElem    ([[x]], [[k]])                         **)

val delPropObj ::
     (xx:Ref?, kk:Str) / (xx: dd:Dict > xx.pro)
  -> {Bool|(not (= xx null))} / (xx: {(= v (upd dd kk bot))} > xx.pro)

val delIdx :: [A]
     (xx:Ref?, _:Int) / (xx: Arr(A) > xx.pro)
  -> {Bool|(and (not (= xx null)))} / (xx: Arr(A) > xx.pro)

val delElem :: {(and (type delPropObj) (type delIdx))}


(***** Root Object ************************************************************)

(* not used by DJS desugaring, only when writing !D by hand *)
val objROOT :: Ref(lROOT)


(******************************************************************************)

val end_of_dref_objects :: Top

