

(***** System D tag-test ******************************************************)

(* val tagof :: x:Top -> {(= v (tag x))} *)


(***** System D dictionary operations *****************************************)

val get_curried :: dd:Dict -> kk:{Str|(has dd {v})} -> {(= v (sel dd kk))}

val get :: [[dd:Dict, kk:{Str|(has dd {v})}]] -> {(= v (sel dd kk))}

val mem :: [[dd:Dict, kk:Str]] -> {Bool|(iff (= v true) (has dd {kk}))}

val set :: [[dd:Dict, kk:Str, zz:Top]] -> {(= v (upd dd kk zz))}

val del :: [[dd:Dict, kk:Str]] -> {(= v (upd dd kk bot))}


(***** JS primitives **********************************************************)

val js_plus :: [[xx:{(or (= (tag v) "number") (= (tag v) "string"))},
                 yy:{(= (tag v) (tag xx))}]]
            -> {(and (= (tag v) (tag xx))
                     (implies (and (= (tag xx) "number") (integer xx) (integer yy))
                              (and (= v (+ xx yy)) (integer v))))}

val js_minus ::
  [[xx:Num, yy:Num]] -> {Num|(implies (and (integer xx) (integer yy))
                                      (and (= v (- xx yy)) (integer v)))}

val js_uminus :: _:Int -> Int

val js_mult :: [[xx:Num, yy:Num]] -> {Num|(implies (and (integer xx) (integer yy))
                                                   (integer v))}

val js_or :: [[xx:Top, yy:Top]] -> {(ite (falsy xx) (= v yy) (= v xx))}

val js_and :: [[xx:Top, yy:Top]] -> {(ite (truthy xx) (= v yy) (= v xx))}

val js_not :: xx:Top -> {Bool|(iff (= v true) (falsy xx))}

val js_eek :: (* == *)
  [[xx:Top, yy:Top]] -> {Bool|(implies (= (tag xx) (tag yy))
                                       (iff (= v true) (= xx yy)))}

val js_threek :: (* === *)
  [[xx:Top, yy:{(= (tag v) (tag xx))}]] -> {Bool|(iff (= v true) (= xx yy))}

(* TODO for eek and threek, might need to special case numbers and only
   have equality for integers. might need to special case reference
   values also. *)

val js_lt :: [[xx:Int, yy:Int]] -> {Bool|(iff (= v true) (< xx yy))}
val js_le :: [[xx:Int, yy:Int]] -> {Bool|(iff (= v true) (<= xx yy))}
val js_gt :: [[xx:Int, yy:Int]] -> {Bool|(iff (= v true) (> xx yy))}
val js_ge :: [[xx:Int, yy:Int]] -> {Bool|(iff (= v true) (>= xx yy))}


(***** recursion **************************************************************)

val fix :: [A] (_: _:A->A) -> A


(******************************************************************************)

let end_of_prims :: Int = 0

