

(***** System D tag-test ******************************************************)

(* val tagof :: x:Top -> {(= v (tag x))} *)


(***** System D dictionary operations *****************************************)

val get_curried :: dd:Dict -> kk:{Str|(has dd {v})} -> {(= v (sel dd kk))}

val get :: (dd:Dict, kk:{Str|(has dd {v})}) -> {(= v (sel dd kk))}

val mem :: (dd:Dict, kk:Str) -> {Bool|(iff (= v true) (has dd {kk}))}

val set :: (dd:Dict, kk:Str, zz:Top) -> {(= v (upd dd kk zz))}

val del :: (dd:Dict, kk:Str) -> {(= v (upd dd kk bot))}


(***** JS primitives **********************************************************)

val js_typeof :: xx:Top -> {(and (implies (public xx) (public v)) (= v (tag xx)))}

val js_plus :: (xx:{(= (tag v) {"number","string"})}, yy:{(= (tag v) (tag xx))})
            -> {(and (= (tag v) (tag xx))
                     (implies (and (= (tag xx) "number") (integer xx) (integer yy))
                              (and (= v (+ xx yy)) (integer v)))
                     (implies (and (public xx) (public yy))
                              (public v))
                     )}

val js_minus ::
  (xx:Num, yy:Num) -> {Num|(implies (and (integer xx) (integer yy))
                                    (and (= v (- xx yy)) (integer v)))}

val js_uminus :: xx:Num
              -> {Num|(implies (integer xx) (and (= v (- 0 xx)) (integer v)))}

val js_mult :: (xx:Num, yy:Num) -> {Num|(implies (and (integer xx) (integer yy))
                                                   (integer v))}

val js_div :: (Num, Num) -> Num

val js_or :: (xx:Top, yy:Top) -> {(and 
  (ite (falsy xx) (= v yy) (= v xx))
  (implies (and (public xx) (public xx)) (public v)))}

val js_and :: (xx:Top, yy:Top) -> {(and
  (ite (truthy xx) (= v yy) (= v xx))
  (implies (and (public xx) (public xx)) (public v)))}

val js_not :: xx:Top -> {Bool|(and 
  (iff (= v true) (falsy xx))
  (implies (public xx) (public v)))}

val js_eek :: (* == *)
  (xx:Top, yy:Top) -> {Bool|(and 
    (implies (= (tag xx) (tag yy)) (iff (= v true) (= xx yy)))
    (implies (and (public xx) (public yy)) (public v)))}

val js_threek :: (* === *)
  (xx:Top, yy:Top) -> {Bool|(and 
    (iff (= v true) (= xx yy)) 
    (implies (and (public xx) (public yy)) (public v)))}

val js_lt :: (xx:NumOrStr, yy:{(= (tag v) (tag xx))})
          -> {Bool|(implies (and (Num xx) (integer xx) (integer yy))
                            (iff (= v true) (< xx yy)))}

val js_le :: (xx:NumOrStr, yy:{(= (tag v) (tag xx))})
          -> {Bool|(implies (and (Num xx) (integer xx) (integer yy))
                            (iff (= v true) (<= xx yy)))}

val js_gt :: (xx:NumOrStr, yy:{(= (tag v) (tag xx))})
          -> {Bool|(implies (and (Num xx) (integer xx) (integer yy))
                            (iff (= v true) (> xx yy)))}

val js_ge :: (xx:NumOrStr, yy:{(= (tag v) (tag xx))})
          -> {Bool|(implies (and (Num xx) (integer xx) (integer yy))
                            (iff (= v true) (>= xx yy)))}


(***** recursion **************************************************************)

(* val fix :: [A] ((A) -> A) -> A *)
val fix :: [A] _: _:A -> A -> A


(***** misc *******************************************************************)

val randStr :: _:Top -> Str


(******************************************************************************)

val end_of_dref_basics :: Top

