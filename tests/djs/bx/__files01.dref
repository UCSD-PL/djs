
val __readFile :: (this:Top, f:{Str|(canReadFile v)}) -> {Str|(flowsFromTo f v)}

val __mkUrl :: (this:Top, Str, h:Str) -> {Str|(urlHost v h)}

val __sendRequest :: (this:Top, u:Str, s:{Str|(canRequest u v)}) -> Str

val __historyOnSite :: [;L] (this:Top, {Str|(canReadHistory v)}) / ()
                    -> Ref(L) / (L: {Arr(Url)|(packed v)} > lArrPro)

val __urlOfString :: (this:Top, s:Str) -> {Url|(parseUrl v s)}

val __stringOfUrl :: (this:Top, u:Url) -> {Str|(parseUrl u v)}

val __urlHost :: (this:Top, u:Url) -> {Str|(urlHost u v)}

val __urlAppendQuery ::
    (this:Top, u:Url, k:Str, y:Str)
 -> {Url|(and
           (forall (s) (implies (urlHost u s) (urlHost v s)))
           (forall (s) (implies (urlPath u s) (urlPath v s)))
           (forall (s) (implies (urlScheme u s) (urlScheme v s))))}
           (* DOM.f9 also has:
                 (forall (q:list (string*string)) .
                      UrlQuery u q => UrlQuery r (Cons (k, v) q))}
           *)
