The Same-Origin Policy: 
  prevents scripts loaded from one Web site from getting or setting properties of
  a document loaded from a different site.


The Same-Origin Check:
  When a script attempts to access properties or methods in a different
  window—for example, using the handle returned by window.open() - the browser
  performs a same-origin check on the URLs of the documents in question. If the
  URLs of the documents pass this check, the property can be accessed. If they
  don‘t, an error is thrown. The same-origin check consists of verifying that
  the URL of the document in the target window has the same - origin as the
  document containing the calling script. 


Jetpack Extension Framework - capability leaks [ECOOP'12]:
  Happens when a module requests access to a specific XPCOM interface and
  inadvertently exports.
  TODO: get example(s) that manifest the leak vs example(s) that do not.

  [Wed Apr 10 14:19:05 PDT 2013]

  The check that [ECOOP'12] does is whether "exports" is tainted or not.

  An object is marked as privileged if it directly acquires capabilities. 
  An object is marked as tainted if it transitively acquires capabilities. Both
  propagate the acquired capability.

  In the leaking example in [ECOOP'12], the leak is propagated through a
  closure. 

  Cannot freeze a location to a {Ref(~w)|(public v)}

